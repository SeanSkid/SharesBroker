/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package seansharebrokerapp;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.util.Pair;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.transform.stream.StreamSource;
import shareOrder.PriceDetails;
import shareOrder.ShareDetails;
import shareOrder.SharesGroup;

/**
 *
 * @author JubJub
 */
public class BrokerUI extends javax.swing.JFrame {

    DefaultTableModel ShareTable;
    static Vector<String> Stocks = new Vector(Arrays.asList("AMZN", "AAPL", "MSFT", "BCS", "HSBC"));
    static Vector<String> SharePrices = new Vector(Arrays.asList(0,0,0,0,0));
    static Vector<String> AvailShares = new Vector(Arrays.asList(0,0,0,0,0));
    static Vector<Pair<String, Integer>> OwnedShares;
    static boolean UpdatedPrices = false;
    /**
     * Creates new form BrokerUI
     */
    public BrokerUI() throws IOException {
        initComponents();
        ReadFromFile();
        InitialRows();
    }
    
    public static void main(String[] argv) throws DatatypeConfigurationException, IOException {
        BrokerUI myBrokerUI = new BrokerUI();
        myBrokerUI.RunUI();
        
        SharesThread sth = new SharesThread();
        sth.start();

        while(true) {
            if(UpdatedPrices == true) {
                for(int x = 0; x < Stocks.size(); x++ ) {
                    //System.out.print("Symbol: " + Stocks.get(x));
                    //System.out.print("SharePrice: " + SharePrices.get(x));
                    //System.out.print("AvailShares:" + AvailShares.get(x));
                    String[] Info = {null, Stocks.get(x), null, SharePrices.get(x), AvailShares.get(x)};
                    myBrokerUI.MarshalInfo(Info);
                    //System.out.print("Updated Share Prices!");
                }
            }
            try {
                Thread.sleep(5000);
            } catch (InterruptedException ex) {
                Logger.getLogger(BrokerUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        //String[] DefaultStocks = {"AMZN", "AAPL", "MSFT", "BCS", "HSBC"};
        //for(int x = 0; x < DefaultStocks.length; x++ ) {
        //    myBrokerUI.SearchSymbol(DefaultStocks[x]);
        //}
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Title = new javax.swing.JLabel();
        Signature = new javax.swing.JLabel();
        AddShareInput = new javax.swing.JTextField();
        AddShareText = new javax.swing.JLabel();
        NameSearchBttn = new javax.swing.JButton();
        SymbSearchBttn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        SharesTable = new javax.swing.JTable();
        SearchText = new javax.swing.JLabel();
        SearchInput = new javax.swing.JTextField();
        SearchBttn = new javax.swing.JButton();
        ResetBttn = new javax.swing.JButton();
        BuyShareBttn = new javax.swing.JButton();
        BuyShareText = new javax.swing.JLabel();
        BuyShareInput = new javax.swing.JTextField();
        ManualRefreshBttn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Title.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        Title.setText("Shares Brokering Application");

        Signature.setText("Sean Skidmore");

        AddShareText.setText("Add Share");

        NameSearchBttn.setBackground(new java.awt.Color(255, 204, 0));
        NameSearchBttn.setText("Name");
        NameSearchBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NameSearchBttnActionPerformed(evt);
            }
        });

        SymbSearchBttn.setBackground(new java.awt.Color(255, 204, 0));
        SymbSearchBttn.setText("Symbol");
        SymbSearchBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SymbSearchBttnActionPerformed(evt);
            }
        });

        SharesTable.setBackground(new java.awt.Color(255, 204, 0));
        SharesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CompanySymbol", "CompanyName", "Currency", "SharePrice", "LastUpdate", "AvailableShares", "OwnedShares"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(SharesTable);
        if (SharesTable.getColumnModel().getColumnCount() > 0) {
            SharesTable.getColumnModel().getColumn(0).setResizable(false);
            SharesTable.getColumnModel().getColumn(0).setPreferredWidth(95);
            SharesTable.getColumnModel().getColumn(1).setResizable(false);
            SharesTable.getColumnModel().getColumn(2).setResizable(false);
            SharesTable.getColumnModel().getColumn(2).setPreferredWidth(60);
            SharesTable.getColumnModel().getColumn(3).setResizable(false);
            SharesTable.getColumnModel().getColumn(3).setPreferredWidth(70);
            SharesTable.getColumnModel().getColumn(4).setResizable(false);
            SharesTable.getColumnModel().getColumn(5).setResizable(false);
            SharesTable.getColumnModel().getColumn(5).setPreferredWidth(95);
            SharesTable.getColumnModel().getColumn(6).setResizable(false);
            SharesTable.getColumnModel().getColumn(6).setPreferredWidth(85);
        }

        SearchText.setText("Search");

        SearchBttn.setBackground(new java.awt.Color(255, 204, 0));
        SearchBttn.setText("Search");
        SearchBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchBttnActionPerformed(evt);
            }
        });

        ResetBttn.setBackground(new java.awt.Color(255, 204, 0));
        ResetBttn.setText("Reset");
        ResetBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetBttnActionPerformed(evt);
            }
        });

        BuyShareBttn.setBackground(new java.awt.Color(255, 204, 0));
        BuyShareBttn.setText("Buy");
        BuyShareBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuyShareBttnActionPerformed(evt);
            }
        });

        BuyShareText.setText("Buy Share");

        ManualRefreshBttn.setBackground(new java.awt.Color(255, 204, 0));
        ManualRefreshBttn.setText("Manual Refresh");
        ManualRefreshBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ManualRefreshBttnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 796, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 41, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(AddShareInput, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(NameSearchBttn)
                        .addGap(18, 18, 18)
                        .addComponent(SymbSearchBttn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(AddShareText)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SearchInput, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(ResetBttn)
                        .addGap(18, 18, 18)
                        .addComponent(SearchBttn))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(134, 134, 134)
                        .addComponent(SearchText)
                        .addGap(17, 17, 17)))
                .addGap(31, 31, 31))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(205, 205, 205)
                .addComponent(ManualRefreshBttn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(BuyShareInput, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(BuyShareBttn)
                        .addGap(129, 129, 129)
                        .addComponent(Signature, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(BuyShareText)
                        .addGap(259, 259, 259))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Title)
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddShareText)
                    .addComponent(SearchText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddShareInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NameSearchBttn)
                    .addComponent(SymbSearchBttn)
                    .addComponent(SearchBttn)
                    .addComponent(ResetBttn))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(BuyShareText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Signature, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(BuyShareBttn)
                                    .addComponent(BuyShareInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(20, 20, 20))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(ManualRefreshBttn)
                        .addGap(30, 30, 30))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void NameSearchBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NameSearchBttnActionPerformed
        String Input = AddShareInput.getText();
        if (Input.equals("")) {
            
        }
        else {
            try {
                SearchName(Input);
            } catch (DatatypeConfigurationException | IOException ex) {
                Logger.getLogger(BrokerUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_NameSearchBttnActionPerformed

    private void SymbSearchBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SymbSearchBttnActionPerformed
        String Input = AddShareInput.getText();
        if (Input.equals("")) {
            
        }
        else {
            try {
                SearchSymbol(Input);
            } catch (DatatypeConfigurationException | IOException ex) {
                Logger.getLogger(BrokerUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_SymbSearchBttnActionPerformed

    private void SearchBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchBttnActionPerformed
        String Input = SearchInput.getText();
        RefreshRows();
        SearchRow(Input);
    }//GEN-LAST:event_SearchBttnActionPerformed

    private void ResetBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetBttnActionPerformed
        RefreshRows();
        InitialRows();
    }//GEN-LAST:event_ResetBttnActionPerformed

    private void BuyShareBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuyShareBttnActionPerformed
        int SelectedRow = SharesTable.getSelectedRow();
        String ShareSymbol = (SharesTable.getValueAt(SelectedRow, 0).toString());
        System.out.print("\nBought " + BuyShareInput.getText() + " shares from " + ShareSymbol);
        for( int x = 0; x < OwnedShares.size(); x++) {
            Pair<String, Integer> testPair = OwnedShares.get(x);
            if (testPair.getKey().equals(ShareSymbol)) {
                testPair = new Pair<> (ShareSymbol, testPair.getValue() + Integer.parseInt(BuyShareInput.getText()));
                OwnedShares.set(x, testPair);
            }        
        }
        RefreshRows();
        InitialRows();
        String file = "OwnedShares.txt";
        BufferedReader br = null;
        try {
            br = new BufferedReader(new FileReader(file));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(BrokerUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        String CompareString = SharesTable.getValueAt(SelectedRow, 0).toString();
        String st; 
        boolean LineContains;
        try {
            while ((st = br.readLine()) != null) {
                LineContains = st.contains(CompareString);
                //System.out.print("CHECKING IF MATCH! " + LineContains);
                if (LineContains == true) {
                    break;
                }
            }
            //FileWriter fw = new FileWriter(file, true);
            //fw.write(SharesTable.getValueAt(SelectedRow, 0) + "/" + BuyShareInput.getText());
            //fw.close();
        } catch (IOException ex) {
            Logger.getLogger(BrokerUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BuyShareBttnActionPerformed

    private void ManualRefreshBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ManualRefreshBttnActionPerformed
        RefreshRows();
        InitialRows();
    }//GEN-LAST:event_ManualRefreshBttnActionPerformed

    public void SearchSymbol(String SearchTerm) throws DatatypeConfigurationException, IOException {
        String ResultInfo = getCompanyInfoSymbol(SearchTerm);
        String[] CompanyInfo = ResultInfo.split("/", 5);
        CreateNewShare(CompanyInfo);
        MarshalInfo(CompanyInfo);
        return;
    }
    
    public void SearchName(String SearchTerm) throws DatatypeConfigurationException, IOException {
        String ResultInfo = getCompanyInfoName(SearchTerm);
        String[] CompanyInfo = ResultInfo.split("/", 5);
        CreateNewShare(CompanyInfo);
        return;
    }
    
    public void CreateNewShare(String[] CompanyInfo) throws DatatypeConfigurationException, IOException {
        MarshalInfo(CompanyInfo);
        Pair<String, Integer> newPair = new Pair<>(CompanyInfo[1],0);
        OwnedShares.add(newPair);
        try
        {
            String file = "OwnedShares.txt";
            FileWriter fw = new FileWriter(file,true);
            fw.write("\n" + CompanyInfo[1] + "/0");
            fw.close();
        }
        catch(IOException ioe)
        {
            System.err.println("IOException: " + ioe.getMessage());
        }
    }
            
    public void MarshalInfo(String[] CompanyInfo) throws DatatypeConfigurationException, IOException {
        SharesGroup all_shares = null;
        boolean Absent = true;
        try {
            javax.xml.bind.JAXBContext jaxbCtx = javax.xml.bind.JAXBContext.newInstance(SharesGroup.class);
            javax.xml.bind.Unmarshaller unmarshaller = jaxbCtx.createUnmarshaller();
            all_shares =  unmarshaller.unmarshal(new StreamSource(new File("ShareInformation.txt")), SharesGroup.class).getValue(); //NOI18N
        } catch (javax.xml.bind.JAXBException ex) {
            // XXXTODO Handle exception
            java.util.logging.Logger.getLogger("global").log(java.util.logging.Level.SEVERE, null, ex); //NOI18N
        }
        //System.out.println("YOU ARE LOOKING FOR THIS THING!!! " + all_shares);

        List<ShareDetails> current_shares =  all_shares.getShares();
        
        ShareDetails nextShare = new ShareDetails();
        Iterator itr = current_shares.iterator();
        while(itr.hasNext()) {
            nextShare = (ShareDetails) itr.next();
            PriceDetails nextPrice = nextShare.getSharePrice();
            //System.out.println("CompanyName: " + nextShare.getCompanyName() + " CompanySymbol: " + nextShare.getCompanySymbol() + " MatchSymbol: " + CompanyInfo[1]);
            if(nextShare.getCompanySymbol().equals(CompanyInfo[1])) {
                //System.out.println("Match found!");
                Absent = false;
                PriceDetails newPrice = new PriceDetails();
                newPrice.setCurrency(nextPrice.getCurrency());
                float floatValue = Float.parseFloat(CompanyInfo[3]);
                newPrice.setValue(floatValue);
                String date = (getTimeDate());
                newPrice.setLastUpdate(date);
                nextShare.setSharePrice(newPrice);
                int intValue = Integer.parseInt(CompanyInfo[4]);
                nextShare.setAvailableShares(intValue);
                
                //UpdateTableRow(CompanyInfo[1], floatValue, date);
                RefreshRows();
                InitialRows();
            }
        }
        if(Absent == true) {
            //System.out.println("NO match found!");
            ShareDetails newShare = new ShareDetails();
            PriceDetails newPrice = new PriceDetails();

            newShare.setCompanyName(CompanyInfo[0]);
            newShare.setCompanySymbol(CompanyInfo[1]);
            int intValue = Integer.parseInt(CompanyInfo[4]);
            newShare.setAvailableShares(intValue);
            newPrice.setCurrency(CompanyInfo[2]);
            float floatValue = Float.parseFloat(CompanyInfo[3]);
            newPrice.setValue(floatValue);
            String date = (getTimeDate());
            newPrice.setLastUpdate(date);
            
            //System.out.print("Info: " + CompanyInfo[1] + CompanyInfo[0] + CompanyInfo[2] + floatValue + date + intValue + 2);
            
            newShare.setSharePrice(newPrice);
            current_shares.add(newShare);
            
            Stocks.addElement(CompanyInfo[1]);
            SharePrices.addElement(CompanyInfo[3]);
            AvailShares.addElement(CompanyInfo[4]);
            
            //System.out.print("PRINTED TO TABLE\n");
            NewTableRow(CompanyInfo[1], CompanyInfo[0], CompanyInfo[2], floatValue, date, intValue, 2);
        }
        try {
            javax.xml.bind.JAXBContext jaxbCtx = javax.xml.bind.JAXBContext.newInstance(all_shares.getClass().getPackage().getName());
            javax.xml.bind.Marshaller marshaller = jaxbCtx.createMarshaller();
            marshaller.setProperty(javax.xml.bind.Marshaller.JAXB_ENCODING, "UTF-8"); //NOI18N
            marshaller.setProperty(javax.xml.bind.Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
            //Writing the whole XML document to file
            File ShareFile = new File("ShareInformation.txt");
            marshaller.marshal(all_shares, ShareFile);

        } catch (javax.xml.bind.JAXBException ex) {
            // XXXTODO Handle exception
            java.util.logging.Logger.getLogger("global").log(java.util.logging.Level.SEVERE, null, ex); //NOI18N
        }
    }
    
    private String getTimeDate() throws DatatypeConfigurationException { 
        DateFormat dateFormat = new SimpleDateFormat("HH:mm:ss dd/MM/yyyy");
	Date date = new Date();
	String CurrDate = (dateFormat.format(date));
        return CurrDate;
    }

    
    public void RunUI() {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new BrokerUI().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(BrokerUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }
        }); 
    }
    
    public void ReadFromFile() throws FileNotFoundException, IOException {
        File file = new File("OwnedShares.txt"); 
        OwnedShares = new Vector<Pair<String,Integer>>();
        BufferedReader br = new BufferedReader(new FileReader(file));
  
        String st; 
        while ((st = br.readLine()) != null) {
            String[] arrayString = st.split("/", 0);
            //System.out.print("Array print: " + arrayString[0] + " + " + arrayString[1] + "\n");
            Pair<String, Integer> newPair = new Pair<>(arrayString[0], Integer.parseInt(arrayString[1]));
            OwnedShares.add(newPair);
        }
        br.close();
    }
    
    private void InitialRows() {
        SharesGroup all_shares = null;
        try {
            javax.xml.bind.JAXBContext jaxbCtx = javax.xml.bind.JAXBContext.newInstance(SharesGroup.class);
            javax.xml.bind.Unmarshaller unmarshaller = jaxbCtx.createUnmarshaller();
            all_shares =  unmarshaller.unmarshal(new StreamSource(new File("ShareInformation.txt")), SharesGroup.class).getValue(); //NOI18N
        } catch (javax.xml.bind.JAXBException ex) {
            // XXXTODO Handle exception
            java.util.logging.Logger.getLogger("global").log(java.util.logging.Level.SEVERE, null, ex); //NOI18N
        }
        //System.out.println("YOU ARE LOOKING FOR THIS THING!!! " + all_shares);

        List<ShareDetails> current_shares =  all_shares.getShares();
        
        ShareDetails nextShare;
        Iterator itr = current_shares.iterator();
        while(itr.hasNext()) {
            nextShare = (ShareDetails) itr.next();
            PriceDetails nextPrice = nextShare.getSharePrice();
            int UserShares = 0;
            for( int x = 0; x < OwnedShares.size(); x++) {
                Pair<String, Integer> sharePair = OwnedShares.get(x);
                if (sharePair.getKey().equals(nextShare.getCompanySymbol())) {
                    UserShares = sharePair.getValue();
                }        
            }
            //System.out.print("!!!!! " + nextShare.getCompanySymbol() + "/" + nextShare.getCompanyName() + "/" + nextPrice.getCurrency() + "/" + nextPrice.getValue() + "/" + nextPrice.getLastUpdate() + "/" + nextShare.getAvailableShares());
            NewTableRow(nextShare.getCompanySymbol(), nextShare.getCompanyName(), nextPrice.getCurrency(), nextPrice.getValue(), nextPrice.getLastUpdate(), nextShare.getAvailableShares() - UserShares, UserShares);
        }
    }
    
    public void RefreshRows() {
        ShareTable = (DefaultTableModel) SharesTable.getModel();
        ShareTable.setRowCount(0); 
    }
    
    public void SearchRow(String CompanySymbol) {
         
        SharesGroup all_shares = null;
        try {
            javax.xml.bind.JAXBContext jaxbCtx = javax.xml.bind.JAXBContext.newInstance(SharesGroup.class);
            javax.xml.bind.Unmarshaller unmarshaller = jaxbCtx.createUnmarshaller();
            all_shares =  unmarshaller.unmarshal(new StreamSource(new File("ShareInformation.txt")), SharesGroup.class).getValue(); //NOI18N
        } catch (javax.xml.bind.JAXBException ex) {
            // XXXTODO Handle exception
            java.util.logging.Logger.getLogger("global").log(java.util.logging.Level.SEVERE, null, ex); //NOI18N
        }
        //System.out.println("YOU ARE LOOKING FOR THIS THING!!! " + all_shares);

        List<ShareDetails> current_shares =  all_shares.getShares();
        
        ShareDetails nextShare = new ShareDetails();
        Iterator itr = current_shares.iterator();
        while(itr.hasNext()) {
            nextShare = (ShareDetails) itr.next();
            PriceDetails nextPrice = nextShare.getSharePrice();
            int UserShares = 0;
            for( int x = 0; x < OwnedShares.size(); x++) {
                Pair<String, Integer> sharePair = OwnedShares.get(x);
                if (sharePair.getKey().equals(nextShare.getCompanySymbol())) {
                    UserShares = sharePair.getValue();
                }        
            }
            //System.out.println("CompanyName: " + nextShare.getCompanyName() + " CompanySymbol: " + nextShare.getCompanySymbol() + " MatchSymbol: " + CompanyInfo[1]);
            if(nextShare.getCompanySymbol().equals(CompanySymbol)) {
                NewTableRow(nextShare.getCompanySymbol(), nextShare.getCompanyName(), nextPrice.getCurrency(), nextPrice.getValue(), nextPrice.getLastUpdate(), nextShare.getAvailableShares(), UserShares );
            }
        }
    }

    public void NewTableRow(String CompanySymbol, String CompanyName, String Currency, float SharePrice, String LastUpdate, int AvailableShares, int OwnedShares) {
        ShareTable = (DefaultTableModel) SharesTable.getModel();
        //System.out.println("REACHED HERE WITH: " + CompanyName);
        //ShareTable.insertRow(ShareTable.getRowCount(), new Object[] {CompanySymbol, CompanyName, Currency, SharePrice, LastUpdate, AvailableShares, OwnedShares});
        ShareTable.addRow(new Object[] {CompanySymbol, CompanyName, Currency, SharePrice, LastUpdate, AvailableShares, OwnedShares});
    }
    
    public void UpdateTableRow(String CompanySymbol, float SharePrice, String Date) {
        //ShareTable = (DefaultTableModel) SharesTable.getModel();
        //int Rows = ShareTable.getRowCount();
        //for (int i = 0; i < Rows; i++) {
            //Object CurrentRow = ShareTable.getValueAt(i, 0);
            //String newString = CurrentRow.toString();
            //if (newString.equals(CompanySymbol)) {
                //System.out.print(" Old SharePrice: " + ShareTable.getValueAt(i, 3) + " New SharePrice: " + SharePrice);
                //System.out.print(" Old Date: " + ShareTable.getValueAt(i, 4) + " New Date: " + Date);
                //Object newPrice = SharePrice;
                //Object newDate = Date;
                //System.out.print("REACHED HERE BOSS");
                //ShareTable.setValueAt(newPrice, i, 3);
                //ShareTable.setValueAt(newDate, i, 4);
                //SharesTable.setValueAt(newPrice, i, 3);
                //SharesTable.setValueAt(newDate, i, 4);
                //ShareTable.insertRow(i ,new Object[] {ShareTable.getValueAt(i, 0), ShareTable.getValueAt(i, 1), ShareTable.getValueAt(i, 2), newPrice, newDate, ShareTable.getValueAt(i, 5), ShareTable.getValueAt(i, 6)});
                //ShareTable.removeRow(i + 1);
                //SharesTable.setModel(ShareTable);
            //}
        //}
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AddShareInput;
    private javax.swing.JLabel AddShareText;
    private javax.swing.JButton BuyShareBttn;
    private javax.swing.JTextField BuyShareInput;
    private javax.swing.JLabel BuyShareText;
    private javax.swing.JButton ManualRefreshBttn;
    private javax.swing.JButton NameSearchBttn;
    private javax.swing.JButton ResetBttn;
    private javax.swing.JButton SearchBttn;
    private javax.swing.JTextField SearchInput;
    private javax.swing.JLabel SearchText;
    private javax.swing.JTable SharesTable;
    private javax.swing.JLabel Signature;
    private javax.swing.JButton SymbSearchBttn;
    private javax.swing.JLabel Title;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private static String getCompanyInfoName(java.lang.String companyName) {
        org.me.ShareWebService_Service service = new org.me.ShareWebService_Service();
        org.me.ShareWebService port = service.getShareWebServicePort();
        return port.getCompanyInfoName(companyName);
    }

    private static String getCompanyInfoSymbol(java.lang.String companySymbol) {
        org.me.ShareWebService_Service service = new org.me.ShareWebService_Service();
        org.me.ShareWebService port = service.getShareWebServicePort();
        return port.getCompanyInfoSymbol(companySymbol);
    }
}
